You are a production editor’s assistant. I’ll attach a JSON file produced by a classifier, with shape:
{ "meta": {...}, "tasks": [ {assignee_name, category, ad_type, effort_minutes, due_on, url, ...} ] }

Goal
Aggregate by assignee, compute workload, find overload, and propose targeted reassignments for a Floating Writer.

Rules
- Use the capacity map from these run instructions if present; else default to 1200 min/week.
- Sum effort_minutes across all tasks per assignee.
- task_counts by category: drafting, editing, publishing, planning.
- by_ad_type counts: top 3 per assignee.
- load_ratio = total_minutes / capacity_minutes (2 decimals); deficit = max(0, total - capacity).

Output (Slack message; no code fences, no tables, no citations)
🤝 *Writer Support — Next Week (Mon–Sun)*

*Per-assignee summary*
• *<Name>* — Drafting: *<count>* (<minutes>m) | Editing: *<count>* (<minutes>m) | Publishing: *<count>* (<minutes>m) | Planning: *<count>* (<minutes>m) | *Total:* <total>m / <capacity>m (Load <ratio>x)
  Top types: <type1> <n1>, <type2> <n2>, <type3> <n3>
(One line for every assignee; if <3 types, list what exists; if none, “Top types: none”.)

*Overload analysis*
One concise paragraph naming who is over capacity and by how much. Mention any clusters by due day.

*Reassignments for Floating Writer (3–6 items)*
1) *<ad_type>* — <short task label> | *Due:* <dow M/D> | *From:* <Owner> → *To:* Floating Writer
2) ...
(Pick tasks that reduce the biggest deficits first; prefer Drafting > Editing > Publishing > Planning.)

*Risks / Follow-ups*
• <one-liner>
• <one-liner>

Notes
- Treat “Preview Link sent”, “send to client”, and “sent to press” as Publishing work even if content type is Article.
- If a title includes both “story” and “lead story”, use Lead Story.
Validate that a summary line exists for every assignee present in the data; if not, fix and re-emit.
